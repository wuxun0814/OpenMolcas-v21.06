# Some useful templates:
# doc-build: rules for when to build documentation
# doc-publish: rules for when to publish documentation

.template: &doc-build
  rules:
    # not on tags
    - if: '$CI_COMMIT_TAG'
      when: never
    # merge requests
    - if: '$CI_MERGE_REQUEST_IID'
      when: on_success
    # branches, api, trigger, web
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "api" || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web"'
      when: on_success
    # scheduled release creation
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CREATE_RELEASE'
      when: on_success

.template: &doc-publish
  rules:
    # only on master
    - if: '$CI_PROJECT_PATH == "Molcas/OpenMolcas" && $CI_COMMIT_REF_NAME == "master"'
      when: on_success
    # scheduled release creation
    - if: '$CI_PROJECT_PATH == "Molcas/OpenMolcas" && $CI_PIPELINE_SOURCE == "schedule" && $CREATE_RELEASE'
      when: on_success

# A special job for building the documentation,
doc:
  stage: build
  interruptible: true
  image: ${CI_REGISTRY}/molcas/dockerfiles/doc:latest
  script:
    # Create a temporary tag if this is a release pipeline
    # (the tag is exported to variables.env for later use in the release job)
    - |
      touch variables.env
      if [ $CI_PIPELINE_SOURCE == "schedule" ] && [ $CREATE_RELEASE == "true" ] ; then
        TAG=v$(date +%y.%m)
        echo TAG=$TAG > variables.env
        git config --global user.name "${GITLAB_USER_NAME}"
        git config --global user.email "${GITLAB_USER_EMAIL}"
        git tag $TAG -m "temporary tag"
      fi
    # First build sphinx doc
    - git submodule update --init External/lapack
    - mkdir build
    - cd build
    - cmake ..
    - export PDF_FILE="../Manual.pdf"
    - make doc_all
    - make install
    # Now build doxygen doc
    - cd ../doc/doxygen
    - >
      echo "PROJECT_NUMBER = $(git describe --always --match 'v*')" >> Doxyfile
    # Generating call/caller graphs unfortunately results in too large artifacts for the pages:deploy stage
    #- echo 'CALL_GRAPH = YES' >> Doxyfile
    #- echo 'CALLER_GRAPH = YES' >> Doxyfile
    - doxygen
  after_script:
    - |
      if [ -z "${install_path}" ] ; then export install_path="/opt/OpenMolcas"; fi
    - mv ${install_path} install_dir
    - cat doc/doxygen/doxygen.log
  artifacts:
    reports:
      dotenv: variables.env
    paths:
      - install_dir
      - doc/doxygen/html
    expire_in: 1 day
  <<: *doc-build
  tags:
    - docker

# And the corresponding job to publish the documentation for the master branch
pages:
  stage: deploy
  interruptible: false
  script:
    - |
    - mkdir -p public
    - mv install_dir/doc/html public/sphinx
    - mv install_dir/doc/Manual.pdf public/
    - mv doc/doxygen/html public/doxygen
    - du -sh public/*
  needs:
    - doc
  artifacts:
    paths:
      - public
    expire_in: 1 day
  <<: *doc-publish
